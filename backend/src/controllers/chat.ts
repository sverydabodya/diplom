import { Request, Response } from "express";
import { RequestHandler } from "express";
import { WebsocketRequestHandler } from "express-ws";
import prisma from "../db";
import WebSocket from "ws";

export const getChatById: RequestHandler = async (req, res, next) => {
	const chatId = req.params.id;
	const user = req.session.user;

	if (!user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	try {
		const chat = await prisma.chatRoom.findFirst({
			where: {
				id: chatId,
				users: {
					some: {
						id: user.id,
					},
				},
			},
			include: {
				messages: {
					include: {
						sender: true,
						replyTo: {
							include: {
								sender: true,
							},
						},
					},
					orderBy: {
						createdAt: "asc",
					},
				},
				users: true,
			},
		});

		if (!chat) {
			return res.status(403).json({ error: "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —á–∞—Ç—É" });
		}

		res.json(chat);
	} catch (error) {
		console.error(error);
		throw new Error(`Failed to fetch chat`);
	}
};

export const getChatsByUser: RequestHandler = async (req, res, next) => {
	const user = req.session.user;

	if (!user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	try {
		const chats = await prisma.chatRoom.findMany({
			where: {
				users: {
					some: {
						id: user.id,
					},
				},
			},
			include: {
				users: {
					select: {
						id: true,
						name: true,
						email: true,
						isOnline: true,
						lastSeen: true,
					},
				},
				messages: {
					orderBy: {
						createdAt: "desc",
					},
					take: 1,
					include: {
						sender: {
							select: {
								id: true,
								name: true,
							},
						},
					},
				},
				_count: {
					select: {
						messages: {
							where: {
								senderId: { not: user.id },
								isRead: false,
							},
						},
					},
				},
			},
		});

		// –°–æ—Ä—Ç—É—î–º–æ —á–∞—Ç–∏ –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—é (–∑–∞ –¥–∞—Ç–æ—é –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
		const sortedChats = chats.sort((a, b) => {
			// –°–ø–æ—á–∞—Ç–∫—É —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—é –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
			const aUnreadCount = a._count?.messages || 0;
			const bUnreadCount = b._count?.messages || 0;

			if (aUnreadCount > 0 && bUnreadCount === 0) return -1;
			if (aUnreadCount === 0 && bUnreadCount > 0) return 1;

			// –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –æ–¥–Ω–∞–∫–æ–≤–∞, —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—é
			const aLastMessage = a.messages[0];
			const bLastMessage = b.messages[0];

			// –Ø–∫—â–æ —É —á–∞—Ç—É –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Ç—É
			const aDate = aLastMessage
				? new Date(aLastMessage.createdAt)
				: new Date(a.createdAt);
			const bDate = bLastMessage
				? new Date(bLastMessage.createdAt)
				: new Date(b.createdAt);

			// –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
			return bDate.getTime() - aDate.getTime();
		});

		res.json(sortedChats);
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —á–∞—Ç—ñ–≤:", error);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö" });
	}
};

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è WebSocket –∫–ª—ñ—î–Ω—Ç—ñ–≤
const chatClients: { [chatId: string]: WebSocket[] } = {};
const unreadClients: WebSocket[] = [];
const onlineClients: { [userId: string]: WebSocket } = {};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const updateUserOnlineStatus = async (userId: string, isOnline: boolean) => {
	try {
		await prisma.user.update({
			where: { id: userId },
			data: {
				isOnline,
				lastSeen: new Date(),
			},
		});

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
		const statusUpdateData = JSON.stringify({
			type: "user_status_update",
			userId,
			isOnline,
			lastSeen: new Date(),
		});

		// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ–º –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º
		Object.values(chatClients)
			.flat()
			.forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(statusUpdateData);
				}
			});

		unreadClients.forEach((client: WebSocket) => {
			if (client.readyState === client.OPEN) {
				client.send(statusUpdateData);
			}
		});
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—É:", error);
	}
};

export const sendMessage: WebsocketRequestHandler = async (ws, req) => {
	const chatId = req.params.id!;
	const user = req.session.user;

	if (!user) {
		ws.close();
		return;
	}

	if (!chatClients[chatId]) {
		chatClients[chatId] = [];
	}
	chatClients[chatId].push(ws);

	// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –æ–Ω–ª–∞–π–Ω
	await updateUserOnlineStatus(user.id, true);

	console.log(
		`üîå –ö–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ —á–∞—Ç—É ${chatId}. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${chatClients[chatId].length}`
	);

	ws.on("message", async (msg) => {
		try {
			const data = JSON.parse(msg.toString());

			// –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
			if (data.type === "message") {
				// –ó–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
				const messageData: any = {
					content: data.content,
					senderId: user.id,
					chatRoomId: chatId,
				};

				// –Ø–∫—â–æ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
				if (data.replyToId) {
					// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ
					const replyToMessage = await prisma.message.findFirst({
						where: {
							id: data.replyToId,
							chatRoomId: chatId,
						},
					});

					if (replyToMessage) {
						messageData.replyToId = data.replyToId;
					}
				}

				const message = await prisma.message.create({
					data: messageData,
					include: {
						sender: true,
						replyTo: {
							include: {
								sender: true,
							},
						},
					},
				});

				const messageDataToSend = JSON.stringify({
					type: "new_message",
					message,
				});

				chatClients[chatId].forEach((client: WebSocket) => {
					if (client.readyState === client.OPEN) {
						client.send(messageDataToSend);
					}
				});

				// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
				const unreadUpdateData = JSON.stringify({
					type: "unread_update",
				});

				console.log(
					`üìä –í—ñ–¥–ø—Ä–∞–≤–ª—è—é unread_update. –ö–ª—ñ—î–Ω—Ç—ñ–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: ${unreadClients.length}`
				);

				unreadClients.forEach((client: WebSocket) => {
					if (client.readyState === client.OPEN) {
						client.send(unreadUpdateData);
					}
				});
			} else if (data.type === "typing_start") {
				// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –¥—Ä—É–∫—É–≤–∞—Ç–∏
				const typingData = JSON.stringify({
					type: "typing_start",
					userId: user.id,
					userName: user.name,
				});

				chatClients[chatId].forEach((client: WebSocket) => {
					if (client.readyState === client.OPEN) {
						client.send(typingData);
					}
				});
			} else if (data.type === "typing_stop") {
				// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑—É–ø–∏–Ω–∏–≤ –¥—Ä—É–∫—É–≤–∞–Ω–Ω—è
				const typingData = JSON.stringify({
					type: "typing_stop",
					userId: user.id,
				});

				chatClients[chatId].forEach((client: WebSocket) => {
					if (client.readyState === client.OPEN) {
						client.send(typingData);
					}
				});
			}
		} catch (error) {
			console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ WebSocket –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
		}
	});

	ws.on("close", () => {
		chatClients[chatId] = chatClients[chatId].filter(
			(client: WebSocket) => client !== ws
		);

		// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –æ—Ñ–ª–∞–π–Ω
		updateUserOnlineStatus(user.id, false);

		console.log(
			`üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è –≤—ñ–¥ —á–∞—Ç—É ${chatId}. –ó–∞–ª–∏—à–∏–ª–æ—Å—è: ${chatClients[chatId].length}`
		);
	});
};

export const unreadWebSocket: WebsocketRequestHandler = async (ws, req) => {
	const user = req.session.user;

	if (!user) {
		ws.close();
		return;
	}

	unreadClients.push(ws);

	// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –æ–Ω–ª–∞–π–Ω
	await updateUserOnlineStatus(user.id, true);

	console.log(
		`üîå –ö–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ unread WebSocket. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${unreadClients.length}`
	);

	ws.on("close", () => {
		unreadClients.splice(unreadClients.indexOf(ws), 1);

		// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –æ—Ñ–ª–∞–π–Ω
		updateUserOnlineStatus(user.id, false);

		console.log(
			`üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è –≤—ñ–¥ unread WebSocket. –ó–∞–ª–∏—à–∏–ª–æ—Å—è: ${unreadClients.length}`
		);
	});
};

export const deleteMessage: RequestHandler = async (req, res, next) => {
	const messageId = req.params.id;
	const chatId = req.params.chatId;
	const user = req.session.user;

	try {
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
		const message = await prisma.message.findUnique({
			where: { id: messageId },
			select: { senderId: true },
		});

		if (!message) {
			return res.status(404).json({ error: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
		}

		if (message.senderId !== user.id) {
			return res
				.status(403)
				.json({ error: "–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" });
		}

		// –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		await prisma.message.delete({
			where: { id: messageId },
		});

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
		if (chatClients[chatId]) {
			const deleteData = JSON.stringify({
				type: "delete_message",
				messageId,
			});

			chatClients[chatId].forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(deleteData);
				}
			});
		}

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		const unreadUpdateData = JSON.stringify({
			type: "unread_update",
		});

		unreadClients.forEach((client: WebSocket) => {
			if (client.readyState === client.OPEN) {
				client.send(unreadUpdateData);
			}
		});

		res.status(200).json({ message: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ" });
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" });
	}
};

export const createChat: RequestHandler = async (req, res) => {
	if (!req.session.user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	try {
		const { userIds, name } = req.body;
		console.log(userIds);

		// –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —á–∞—Ç—É
		if (userIds.length === 1) {
			if (!userIds) {
				return res
					.status(400)
					.json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" });
			}

			const userId = userIds[0];
			const user = await prisma.user.findUnique({
				where: { id: userId },
			});

			if (!user) {
				return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
			}

			const existingChat = await prisma.chatRoom.findFirst({
				where: {
					AND: [
						{ users: { some: { id: req.session.user.id } } },
						{ users: { some: { id: userId } } },
					],
				},
				include: {
					_count: {
						select: { users: true },
					},
				},
			});

			if (existingChat._count.users <= 2) {
				return res.json(existingChat);
			}

			const chat = await prisma.chatRoom.create({
				data: {
					users: {
						connect: [{ id: req.session.user.id }, { id: userId }],
					},
				},
				include: {
					users: {
						select: {
							id: true,
							name: true,
							email: true,
						},
					},
				},
			});

			// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É
			chat.users.forEach((user) => {
				console.log(`–ù–æ–≤–∏–π —á–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.id}`);
			});

			// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
			const unreadUpdateData = JSON.stringify({
				type: "unread_update",
			});

			unreadClients.forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(unreadUpdateData);
				}
			});

			res.json(chat);
		}
		// –î–ª—è –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É
		else if (userIds.length > 1) {
			console.log("group");

			if (!userIds || !Array.isArray(userIds) || userIds.length < 2) {
				return res
					.status(400)
					.json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" });
			}

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —ñ—Å–Ω—É—é—Ç—å
			const users = await prisma.user.findMany({
				where: {
					id: { in: userIds },
				},
			});

			if (users.length !== userIds.length) {
				return res
					.status(404)
					.json({ error: "–î–µ—è–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
			}

			// –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤
			const allUserIds = [...userIds, req.session.user.id];

			// // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î —á–∞—Ç –∑ —Ü–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
			// const existingChat = await prisma.chatRoom.findFirst({
			// 	where: {
			// 		users: {
			// 			every: {
			// 				id: { in: allUserIds },
			// 			},
			// 		},
			// 		AND: [
			// 			{
			// 				users: {
			// 					some: { id: req.session.user.id },
			// 				},
			// 			},
			// 		],
			// 	},
			// });

			// if (existingChat) {
			// 	return res.json(existingChat);
			// }

			// –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
			const chat = await prisma.chatRoom.create({
				data: {
					name: name || `–ì—Ä—É–ø–æ–≤–∏–π —á–∞—Ç (${users.length + 1} —É—á–∞—Å–Ω–∏–∫—ñ–≤)`,
					createdBy: req.session.user.id, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å—Ç–≤–æ—Ä—é–≤–∞—á–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç—ñ–≤
					users: {
						connect: allUserIds.map((id) => ({ id })),
					},
				},
				include: {
					users: {
						select: {
							id: true,
							name: true,
							email: true,
						},
					},
				},
			});

			// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É
			chat.users.forEach((user) => {
				console.log(`–ù–æ–≤–∏–π –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.id}`);
			});

			// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
			const unreadUpdateData = JSON.stringify({
				type: "unread_update",
			});

			unreadClients.forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(unreadUpdateData);
				}
			});

			res.json(chat);
		} else {
			return res.status(400).json({ error: "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —á–∞—Ç—É" });
		}
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Ç—É:", error);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Ç—É" });
	}
};

export const deleteChat: RequestHandler = async (req, res) => {
	if (!req.session.user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	const chatId = req.params.id;

	try {
		const chat = await prisma.chatRoom.findFirst({
			where: {
				id: chatId,
				users: {
					some: {
						id: req.session.user.id,
					},
				},
			},
		});

		if (!chat) {
			return res.status(404).json({ error: "–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
		}

		await prisma.chatRoom.delete({
			where: { id: chat.id },
		});

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç—É
		if (chatClients[chatId]) {
			const deleteData = JSON.stringify({
				type: "chat_deleted",
				chatId,
			});

			chatClients[chatId].forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(deleteData);
				}
			});
		}

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		const unreadUpdateData = JSON.stringify({
			type: "unread_update",
		});

		unreadClients.forEach((client: WebSocket) => {
			if (client.readyState === client.OPEN) {
				client.send(unreadUpdateData);
			}
		});

		res.json({ message: "–ß–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–æ" });
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —á–∞—Ç—É:", error);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —á–∞—Ç—É" });
	}
};

export const markMessageAsRead: RequestHandler = async (req, res, next) => {
	const messageId = req.params.id;
	const user = req.session.user;

	if (!user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	try {
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—î —Ç–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—É
		const message = await prisma.message.findFirst({
			where: {
				id: messageId,
				chatRoom: {
					users: {
						some: {
							id: user.id,
						},
					},
				},
			},
			include: {
				chatRoom: true,
				sender: true,
			},
		});

		if (!message) {
			return res.status(404).json({ error: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
		}

		// –ê–≤—Ç–æ—Ä –Ω–µ –º–æ–∂–µ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ
		if (message.senderId === user.id) {
			return res.json(message);
		}

		// –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–µ
		const updatedMessage = await prisma.message.update({
			where: { id: messageId },
			data: {
				isRead: true,
				readAt: new Date(),
			},
			include: {
				sender: true,
			},
		});

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
		const chatId = message.chatRoomId;
		if (chatClients[chatId]) {
			const updateData = JSON.stringify({
				type: "message_read",
				messageId,
				message: updatedMessage,
			});

			console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é message_read –¥–ª—è —á–∞—Ç—É ${chatId}:`, updateData);
			console.log(
				`üë• –ö–ª—ñ—î–Ω—Ç—ñ–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —á–∞—Ç—É ${chatId}: ${chatClients[chatId].length}`
			);

			chatClients[chatId].forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(updateData);
				}
			});
		} else {
			console.log(`‚ö†Ô∏è –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–æ —á–∞—Ç—É ${chatId}`);
		}

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		const unreadUpdateData = JSON.stringify({
			type: "unread_update",
		});

		unreadClients.forEach((client: WebSocket) => {
			if (client.readyState === client.OPEN) {
				client.send(unreadUpdateData);
			}
		});

		res.json(updatedMessage);
	} catch (error) {
		console.error(
			"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ:",
			error
		);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" });
	}
};

export const markAllMessagesAsRead: RequestHandler = async (req, res, next) => {
	const chatId = req.params.chatId;
	const user = req.session.user;

	if (!user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	try {
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—É
		const chat = await prisma.chatRoom.findFirst({
			where: {
				id: chatId,
				users: {
					some: {
						id: user.id,
					},
				},
			},
		});

		if (!chat) {
			return res.status(403).json({ error: "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —á–∞—Ç—É" });
		}

		// –ü–æ–∑–Ω–∞—á–∞—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ (—Ç—ñ–ª—å–∫–∏ —á—É–∂—ñ)
		const result = await prisma.message.updateMany({
			where: {
				chatRoomId: chatId,
				senderId: { not: user.id }, // –¢—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
				isRead: false,
			},
			data: {
				isRead: true,
				readAt: new Date(),
			},
		});

		// –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ WebSocket
		const updatedMessages = await prisma.message.findMany({
			where: {
				chatRoomId: chatId,
				senderId: { not: user.id },
				isRead: true,
			},
			include: {
				sender: true,
			},
			orderBy: {
				readAt: "desc",
			},
			take: result.count,
		});

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
		if (chatClients[chatId]) {
			const updateData = JSON.stringify({
				type: "all_messages_read",
				chatId,
				userId: user.id,
				updatedMessages: updatedMessages,
			});

			console.log(
				`üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é all_messages_read –¥–ª—è —á–∞—Ç—É ${chatId}:`,
				updateData
			);
			console.log(
				`üë• –ö–ª—ñ—î–Ω—Ç—ñ–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —á–∞—Ç—É ${chatId}: ${chatClients[chatId].length}`
			);

			chatClients[chatId].forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(updateData);
				}
			});
		} else {
			console.log(`‚ö†Ô∏è –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–æ —á–∞—Ç—É ${chatId}`);
		}

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		const unreadUpdateData = JSON.stringify({
			type: "unread_update",
		});

		unreadClients.forEach((client: WebSocket) => {
			if (client.readyState === client.OPEN) {
				client.send(unreadUpdateData);
			}
		});

		res.json({ message: "–í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ" });
	} catch (error) {
		console.error(
			"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö:",
			error
		);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å" });
	}
};

export const getUnreadCount: RequestHandler = async (req, res, next) => {
	const user = req.session.user;

	if (!user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	try {
		const unreadCounts = await prisma.chatRoom.findMany({
			where: {
				users: {
					some: {
						id: user.id,
					},
				},
			},
			include: {
				_count: {
					select: {
						messages: {
							where: {
								senderId: { not: user.id },
								isRead: false,
							},
						},
					},
				},
			},
		});

		const result = unreadCounts.map((chat) => ({
			chatId: chat.id,
			unreadCount: chat._count.messages,
		}));

		res.json(result);
	} catch (error) {
		console.error(
			"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:",
			error
		);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö" });
	}
};

export const leaveGroupChat: RequestHandler = async (req, res) => {
	if (!req.session.user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	const chatId = req.params.id;

	try {
		const chat = await prisma.chatRoom.findFirst({
			where: {
				id: chatId,
				users: {
					some: {
						id: req.session.user.id,
					},
				},
			},
			include: {
				users: true,
			},
		});

		if (!chat) {
			return res.status(404).json({ error: "–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
		if (!chat.name) {
			return res
				.status(400)
				.json({ error: "–ú–æ–∂–Ω–∞ –≤–∏–π—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É" });
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î —Å—Ç–≤–æ—Ä—é–≤–∞—á–µ–º —á–∞—Ç—É
		if (chat.createdBy === req.session.user.id) {
			return res.status(400).json({
				error:
					"–í–ª–∞—Å–Ω–∏–∫ —á–∞—Ç—É –Ω–µ –º–æ–∂–µ –∑ –Ω—å–æ–≥–æ –≤–∏–π—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç—É.",
			});
		}

		// –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–∞—Ç—É
		await prisma.chatRoom.update({
			where: { id: chatId },
			data: {
				users: {
					disconnect: { id: req.session.user.id },
				},
			},
		});

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		const unreadUpdateData = JSON.stringify({
			type: "unread_update",
		});

		unreadClients.forEach((client: WebSocket) => {
			if (client.readyState === client.OPEN) {
				client.send(unreadUpdateData);
			}
		});

		res.json({ message: "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É" });
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É:", error);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É" });
	}
};

export const updateChatName: RequestHandler = async (req, res) => {
	if (!req.session.user) {
		console.log("‚ùå –ù–µ–º–∞—î —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ updateChatName");
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π:", req.session.user.id);

	const chatId = req.params.id;
	const { name } = req.body;

	if (!name || name.trim().length === 0) {
		return res.status(400).json({ error: "–ù–∞–∑–≤–∞ —á–∞—Ç—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é" });
	}

	try {
		const chat = await prisma.chatRoom.findFirst({
			where: {
				id: chatId,
				users: {
					some: {
						id: req.session.user.id,
					},
				},
			},
		});

		if (!chat) {
			console.log("‚ùå –ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É");
			return res.status(404).json({ error: "–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
		}

		console.log("‚úÖ –ß–∞—Ç –∑–Ω–∞–π–¥–µ–Ω–æ:", chat.id, "createdBy:", chat.createdBy);

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
		if (!chat.name) {
			return res
				.status(400)
				.json({ error: "–ú–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç—ñ–ª—å–∫–∏ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É" });
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —Å—Ç–≤–æ—Ä—é–≤–∞—á–µ–º —á–∞—Ç—É
		if (chat.createdBy !== req.session.user.id) {
			console.log("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î —Å—Ç–≤–æ—Ä—é–≤–∞—á–µ–º —á–∞—Ç—É");
			return res
				.status(403)
				.json({ error: "–¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á —á–∞—Ç—É –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –π–æ–≥–æ –Ω–∞–∑–≤—É" });
		}

		console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —Å—Ç–≤–æ—Ä—é–≤–∞—á–µ–º —á–∞—Ç—É, –æ–Ω–æ–≤–ª—é—é –Ω–∞–∑–≤—É");

		// –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É —á–∞—Ç—É
		const updatedChat = await prisma.chatRoom.update({
			where: { id: chatId },
			data: { name: name.trim() },
		});

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
		if (chatClients[chatId]) {
			const updateData = JSON.stringify({
				type: "chat_name_updated",
				chatId,
				newName: name.trim(),
			});

			chatClients[chatId].forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(updateData);
				}
			});
		}

		res.json(updatedChat);
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–∞–∑–≤–∏ —á–∞—Ç—É:", error);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–∞–∑–≤–∏ —á–∞—Ç—É" });
	}
};

export const addUserToChat: RequestHandler = async (req, res) => {
	if (!req.session.user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	const chatId = req.params.id;
	const { userId } = req.body;

	if (!userId) {
		return res.status(400).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" });
	}

	try {
		const chat = await prisma.chatRoom.findFirst({
			where: {
				id: chatId,
				users: {
					some: {
						id: req.session.user.id,
					},
				},
			},
		});

		if (!chat) {
			return res.status(404).json({ error: "–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
		if (!chat.name) {
			return res.status(400).json({
				error: "–ú–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç—ñ–ª—å–∫–∏ –¥–æ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É",
			});
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —Å—Ç–≤–æ—Ä—é–≤–∞—á–µ–º —á–∞—Ç—É
		if (chat.createdBy !== req.session.user.id) {
			return res
				.status(403)
				.json({ error: "–¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á —á–∞—Ç—É –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" });
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ —á–∞—Ç—ñ
		const existingUser = await prisma.chatRoom.findFirst({
			where: {
				id: chatId,
				users: {
					some: {
						id: userId,
					},
				},
			},
		});

		if (existingUser) {
			return res
				.status(400)
				.json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ —á–∞—Ç—É" });
		}

		// –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–∞—Ç—É
		const updatedChat = await prisma.chatRoom.update({
			where: { id: chatId },
			data: {
				users: {
					connect: { id: userId },
				},
			},
			include: {
				users: true,
			},
		});

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
		if (chatClients[chatId]) {
			const updateData = JSON.stringify({
				type: "user_added_to_chat",
				chatId,
				userId,
			});

			chatClients[chatId].forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(updateData);
				}
			});
		}

		res.json(updatedChat);
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–∞—Ç—É:", error);
		res
			.status(500)
			.json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–∞—Ç—É" });
	}
};

export const removeUserFromChat: RequestHandler = async (req, res) => {
	if (!req.session.user) {
		return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
	}

	const chatId = req.params.id;
	const userId = req.params.userId;

	try {
		const chat = await prisma.chatRoom.findFirst({
			where: {
				id: chatId,
				users: {
					some: {
						id: req.session.user.id,
					},
				},
			},
		});

		if (!chat) {
			return res.status(404).json({ error: "–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
		if (!chat.name) {
			return res
				.status(400)
				.json({ error: "–ú–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç—ñ–ª—å–∫–∏ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É" });
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —Å—Ç–≤–æ—Ä—é–≤–∞—á–µ–º —á–∞—Ç—É
		if (chat.createdBy !== req.session.user.id) {
			return res
				.status(403)
				.json({ error: "–¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á —á–∞—Ç—É –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" });
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á–∞
		if (chat.createdBy === userId) {
			return res
				.status(400)
				.json({ error: "–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á–∞ —á–∞—Ç—É" });
		}

		// –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–∞—Ç—É
		const updatedChat = await prisma.chatRoom.update({
			where: { id: chatId },
			data: {
				users: {
					disconnect: { id: userId },
				},
			},
			include: {
				users: true,
			},
		});

		// –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
		if (chatClients[chatId]) {
			const updateData = JSON.stringify({
				type: "user_removed_from_chat",
				chatId,
				userId,
			});

			chatClients[chatId].forEach((client: WebSocket) => {
				if (client.readyState === client.OPEN) {
					client.send(updateData);
				}
			});
		}

		res.json(updatedChat);
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–∞—Ç—É:", error);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–∞—Ç—É" });
	}
};
